package org.apache.commons.proxy2.impl;

import java.lang.ref.Reference;
import java.lang.ref.WeakReference;
import java.util.*;

/**
 * Version 1.0
 * Created by lll on 17/6/29.
 * Description
 * A cache for storing implementation classes for proxies based on a specific type of {@link ProxyClassGenerator}. A
 * javapattern.proxy class cache ensures that there is only one class for every {@link ProxyClassGenerator}/{@link ClassLoader}
 * /javapattern.proxy class array combination.
 * copyright generalray4239@gmail.com
 */
public class ProxyClassCache {

  private final Map<ClassLoader, Map<Set<Class<?>>, WeakReference<Class<?>>>> loaderToClassCache =
          new WeakHashMap<>();

  private final ProxyClassGenerator proxyClassGenerator;

  public ProxyClassCache(ProxyClassGenerator proxyClassGenerator) {
    this.proxyClassGenerator = proxyClassGenerator;
  }

  private Map<Set<Class<?>>, WeakReference<Class<?>>> getClassCache(ClassLoader classLoader) {
    Map<Set<Class<?>>, WeakReference<Class<?>>> cache = loaderToClassCache.get(classLoader);
    if (cache == null) {
      cache = new HashMap<Set<Class<?>>, WeakReference<Class<?>>>();
      loaderToClassCache.put(classLoader, cache);
    }
    return cache;
  }


  public Set<Class<?>> toClassCacheKey(Class<?>[] proxyClass) {
    return new HashSet<Class<?>>(Arrays.asList(proxyClass));
  }

  /**
   * Returns the javapattern.proxy class generated by the {@link ProxyClassGenerator} using the specified {@link ClassLoader} and
   * array of javapattern.proxy classes.
   *
   * @param classLoader  the classloader
   * @param proxyClasses the javapattern.proxy classes
   * @return the javapattern.proxy class generated by the {@link ProxyClassGenerator} using the specified {@link ClassLoader} and
   * array of javapattern.proxy classes
   */
  public synchronized Class<?> getProxyClass(ClassLoader classLoader, Class<?>[] proxyClasses) {
    final Map<Set<Class<?>>, WeakReference<Class<?>>> classCache = getClassCache(classLoader);
    final Set<Class<?>> key = toClassCacheKey(proxyClasses);
    Class<?> proxyClass;
    Reference<Class<?>> proxyClassReference = classCache.get(key);
    if (proxyClassReference == null) {
      proxyClass = proxyClassGenerator.generateProxyClass(classLoader, proxyClasses);
      classCache.put(key, new WeakReference<Class<?>>(proxyClass));
    } else {
      synchronized (proxyClassReference) {
        proxyClass = proxyClassReference.get();
        if (proxyClass == null) {
          proxyClass = proxyClassGenerator.generateProxyClass(classLoader, proxyClasses);
          classCache.put(key, new WeakReference<Class<?>>(proxyClass));
        }
      }
    }
    return proxyClass;
  }


}
