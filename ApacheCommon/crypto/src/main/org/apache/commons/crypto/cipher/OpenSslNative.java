package org.apache.commons.crypto.cipher;

import java.nio.ByteBuffer;

/**
 * Version 1.0
 * Created by lll on 17/9/4.
 * Description
 * JNI interface of {@link OpenSsl} implementation. The native method in this
 * class is defined in OpenSslNative.h (generated by javah).
 * copyright generalray4239@gmail.com
 */
public class OpenSslNative {

  private OpenSslNative() {

  }

  /**
   * Declares a native method to initialize JNI field and method IDs.
   */
  public native static void initIDs();


  /**
   * Declares a native method to initialize the cipher context.
   *
   * @param algorithm The algorithm name of cipher
   * @param padding   The padding name of cipher
   * @return the context address of cipher
   */
  public native static long initContext(int algorithm, int padding);

  /**
   * Declares a native method to initialize the cipher context.
   *
   * @param context The cipher context address
   * @param mode    ENCRYPT_MODE or DECRYPT_MODE
   * @param alg     Algorithm Mode of OpenSsl
   * @param padding the padding mode of OpenSsl cipher
   * @param key     crypto key
   * @param iv      crypto iv
   * @return the context address of cipher
   */
  public native static long init(long context, int mode, int alg,
                                 int padding, byte[] key, byte[] iv);

  /**
   * Continues a multiple-part encryption/decryption operation. The data is
   * encrypted or decrypted, depending on how this cipher was initialized.
   *
   * @param context         The cipher context address
   * @param input           The input byte buffer
   * @param inputOffset     The offset in input where the input starts
   * @param inputLength     The input length
   * @param output          The byte buffer for the result
   * @param outputOffset    The offset in output where the result is stored
   * @param maxOutputLength The maximum length for output
   * @return The number of bytes stored in output
   */
  public native static int update(long context, ByteBuffer input,
                                  int inputOffset, int inputLength, ByteBuffer output,
                                  int outputOffset, int maxOutputLength);

  /**
   * Continues a multiple-part encryption/decryption operation. The data is
   * encrypted or decrypted, depending on how this cipher was initialized.
   *
   * @param context         The cipher context address
   * @param input           The input byte array
   * @param inputOffset     The offset in input where the input starts
   * @param inputLength     The input length
   * @param output          The byte array for the result
   * @param outputOffset    The offset in output where the result is stored
   * @param maxOutputLength The maximum length for output
   * @return The number of bytes stored in output
   */
  public native static int updateByteArray(long context, byte[] input,
                                           int inputOffset, int inputLength, byte[] output, int outputOffset,
                                           int maxOutputLength);

  /**
   * Finishes a multiple-part operation. The data is encrypted or decrypted,
   * depending on how this cipher was initialized.
   *
   * @param context         The cipher context address
   * @param output          The byte buffer for the result
   * @param offset          The offset in output where the result is stored
   * @param maxOutputLength The maximum length for output
   * @return The number of bytes stored in output
   */
  public native static int doFinal(long context, ByteBuffer output,
                                   int offset, int maxOutputLength);

  /**
   * Finishes a multiple-part operation. The data is encrypted or decrypted,
   * depending on how this cipher was initialized.
   *
   * @param context         The cipher context address
   * @param output          The byte array for the result
   * @param offset          The offset in output where the result is stored
   * @param maxOutputLength The maximum length for output
   * @return The number of bytes stored in output
   */
  public native static int doFinalByteArray(long context, byte[] output,
                                            int offset, int maxOutputLength);

  /**
   * Cleans the context at native.
   *
   * @param context The cipher context address
   */
  public native static void clean(long context);
}
